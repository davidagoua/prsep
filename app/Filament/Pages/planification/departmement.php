<?php

namespace App\Filament\Pages\planification;

use App\Models\Ild;
use App\Models\Rld;
use App\Models\User;
use Faker\Core\File;
use Faker\Provider\Text;
use Filament\Actions\Action;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Pages\Page;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Grouping\Group;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Support\HtmlString;
use Spatie\SimpleExcel\SimpleExcelReader;

const STATES_LABEL = [
    '0'=>'Draft',
    '10'=>'En arbitrage',
    '20'=>'En validation',
    '30'=>'Validé',
];
const STATES_COLORS = [
    '0'=>'gray',
    '10'=>'info',
    '20'=>'primary',
    '30'=>'success',
];

class departmement extends Page implements HasForms, HasTable
{
    use InteractsWithForms;
    use InteractsWithTable;
    protected static ?string $navigationLabel = "PTBA initial";
    protected static ?string $title = "PTBA departement";

    protected static ?string $navigationGroup = "Planification";
    protected static string $view = 'filament.pages.planification.departmement';

    public static function shouldRegisterNavigation(): bool
    {
        return true;
    }

    public static function getNavigationBadge(): ?string
    {
        return \App\Models\Ptba::query()->where('status', '=', 0)->count(); // TODO: Change the autogenerated stub
    }
    public function getTableQuery()
    {
        return \App\Models\Ptba::query()
            ->when(! request()->user()->hasRole('super-admin'), function ($query) {
                return $query->where('departement_id','=',request()->user()->departement_id);
            });

    }

    protected function getHeaderActions(): array
    {
        return [
            Action::make("template")->label("Télécharger modèle")
                ->outlined()
                ->action(function(){
                    return response()
                        ->download(storage_path("app/private/ptba_template.xlsx"), 'modele_ptba.xlsx');
                })
                ->icon('heroicon-o-arrow-down-on-square'),
            Action::make("importer")
                ->form([
                    FileUpload::make('file')->label('Fichier')->required()
                ])
                ->action(function($data){
                    $excel = SimpleExcelReader::create(storage_path('app/public/'.$data['file']));

                    $ptba = \App\Models\Ptba::query()->updateOrCreate(
                        ['departement_id' => request()->user()->departement_id],
                        [
                            'file'=> storage_path('app/public/'.$data['file'])
                        ]
                    );

                    Ild::query()->where('ptba_id',$ptba->id)->delete();
                    Rld::query()->where('ptba_id',$ptba->id)->delete();

                    foreach ($excel->getRows()->toArray() as $row) {

                        $ild = Ild::create([
                            'titre'=> $row['Indicateur Lié au Décaissement (ILD)'],
                            'ptba_id'=>$ptba->id,
                        ]);


                        $rld  = Rld::create([
                            'departement_id'=>request()->user()->departement_id,
                            'ptba_id'=>$ptba->id,
                            'titre'=> $row['Résultat Lié au Décaissement (RLD)'],
                            'ild_id'=>$ild->id,
                            'date_debut'=>$row['Date debut'],
                            'date_fin'=>$row['Date fin'],
                            'description'=>$row['Description'],
                            'zone'=>$row['Zone concernée'],
                            'cible'=>$row['Cibles concernées'],
                            'source'=>$row['Source des données'],
                            'methodologie_verification'=>$row['Méthodologie pour la vérification'],
                            'montant'=>$row['montant'],
                            'unite'=>$row['unite'],
                            'categorie'=>$row['categorie'],
                        ]);
                    }
                })
                ->close('arrow-up-on-square')
        ];
    }

    public function getTableColumns(): array
    {
        return [
            TextColumn::make('departement.nom'),
            TextColumn::make('montantRld')
                ->label('Montant')
                ->money('CFA'),
            TextColumn::make('status')
                ->badge()
                ->color(fn($state)=> STATES_COLORS[$state])
                ->formatStateUsing(fn($state) => STATES_LABEL[$state])
                ->label('Status')
        ];
    }



    public function getTableActions(): array
    {
        return [
            \Filament\Tables\Actions\Action::make('Details')
                ->outlined()
                ->button()
                ->url(fn($record) => ptba_details::getUrl(['id'=>$record->id])),
            \Filament\Tables\Actions\Action::make('Soumettre')
                ->button()
                ->hidden(fn($record) => $record->status != 0)
                ->action(fn($record) => $record->update(['status'=>'10']))
        ];
    }

}
