<?php

namespace App\Filament\Pages\planification;

use App\Actions\ExportPtba;
use App\Models\Ild;
use App\Models\Rld;
use Filament\Actions\Action;
use Filament\Forms\Components\FileUpload;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\Relation;
use Spatie\SimpleExcel\SimpleExcelReader;
use Spatie\SimpleExcel\SimpleExcelWriter;


class ptba_definitif extends Page implements HasTable
{

    use InteractsWithTable;
    protected static ?string $navigationLabel = "PTBA Definitifs";
    protected static ?string $title = "programme de travail et budget annuel (definitif)";
    protected static ?string $navigationGroup = "Planification";

    protected static string $view = 'filament.pages.planification.ptba_definitif';

    protected function getTableQuery(): Builder|Relation|null
    {
        return \App\Models\Ptba::query()->where('status', '>=', 20);
    }

    protected function getHeaderActions(): array
    {
        return [
            Action::make('exporter')
                ->icon('heroicon-s-arrow-down-tray')
                ->label("Exporter")
                ->action(function(){
                    return ExportPtba::run();
                }),

        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return \App\Models\Ptba::query()->where('status', '>=', 20)->count(); // TODO: Change the autogenerated stub
    }

    public function getTableColumns(): array
    {
        return [
            TextColumn::make('departement.nom')->label("Departement"),
            TextColumn::make('updated_at')->label("Date de soumission"),
            TextColumn::make('montantRld')
                ->label('Montant')
                ->money('CFA'),
            TextColumn::make('status')
                ->badge()
                ->color(fn($state)=> STATES_COLORS[$state])
                ->formatStateUsing(fn($state) => STATES_LABEL[$state])
                ->label('Status')
        ];
    }

    public function getTableActions(): array
    {
        return [
            \Filament\Tables\Actions\Action::make('exporter')->label("Télécharger")
                ->icon('heroicon-o-arrow-down-on-square')
                ->action(function($record){
                    return response()
                        ->download($record->file, $record->departement->nom.'_ptba.xlsx');
                }),
            \Filament\Tables\Actions\Action::make('importer')->label("Joindre")
                ->icon('heroicon-o-arrow-up-on-square')
                ->hidden(fn($record) => $record->status > 20)
                ->form([
                    FileUpload::make('file')->label("PTBA arbitré")
                ])
                ->action(function($data, $record){
                    $excel = SimpleExcelReader::create(storage_path('app/public/'.$data['file']));

                    $ptba = \App\Models\Ptba::query()->updateOrCreate(
                        ['departement_id' => request()->user()->departement_id],
                        [
                            'file'=> storage_path('app/public/'.$data['file'])
                        ]
                    );

                    Ild::query()->where('ptba_id',$ptba->id)->delete();
                    Rld::query()->where('ptba_id',$ptba->id)->delete();

                    foreach ($excel->getRows()->toArray() as $row) {

                        $ild = Ild::create([
                            'titre'=> $row['Indicateur Lié au Décaissement (ILD)'],
                            'ptba_id'=>$ptba->id,
                        ]);


                        $rld  = Rld::create([
                            'departement_id'=>request()->user()->departement_id,
                            'ptba_id'=>$ptba->id,
                            'titre'=> $row['Résultat Lié au Décaissement (RLD)'],
                            'ild_id'=>$ild->id,
                            'date_debut'=>$row['Date debut'],
                            'date_fin'=>$row['Date fin'],
                            'description'=>$row['Description'],
                            'zone'=>$row['Zone concernée'],
                            'cible'=>$row['Cibles concernées'],
                            'source'=>$row['Source des données'],
                            'methodologie_verification'=>$row['Méthodologie pour la vérification'],
                            'montant'=>$row['montant'],
                            'unite'=>$row['unite'],
                            'categorie'=>$row['categorie'],
                        ]);
                    }

                    Notification::make()->success()->title("PTBA Modifié")->send();
                }),
            \Filament\Tables\Actions\Action::make('Soumettre')
                ->button()
                ->hidden(fn($record) => $record->status != 20)
                ->action(fn($record) => $record->update(['status'=>'30'])),
            \Filament\Tables\Actions\Action::make('Reviser')
                ->button()
                ->hidden(fn($record) => $record->status < 30)
                ->action(fn($record) => $record->update(['status'=>'20'])),
            DeleteAction::make('supprimer')->iconButton()
        ];
    }
}
